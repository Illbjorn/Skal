# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

output: prefixed
silent: true
interval: 250ms

dotenv: [.env]

env:
  # Directories
  dir_bin: bin
  dir_skal_main: ./cmd/skal
  dir_app_main: ./cmd/skal

  # Files
  file_version: .github/version
  file_dev_bin: '{{ .dir_bin }}/skal{{ if eq OS "windows" }}.exe{{ end }}'

  # Repository Details
  repo_owner: illbjorn
  repo_name: skal

tasks:
  ##############################################################################
  #                                                                            #
  #                          GitHub Release Management                         #
  #                                                                            #
  ##############################################################################
  create-release:
    aliases: [cr]
    desc: Creates a GitHub release.
    preconditions:
      - sh: '[[ -n "{{ .tag }}" ]]'
        msg: A 'tag' input value is required.
      - sh: '[[ -n "{{ .title }}" ]]'
        msg: A 'title' input value is required.
    env:
      tag: '{{ .tag }}'
      title: '{{ .title }}'
      body: '{{ .body }}'
      files: '{{ .dir_bin }}/*'
    cmd: .github/scripts/create-release.sh

  build-ci:
    aliases: [bci]
    desc: |
      Performs the misc GOOS/GOARCH permutation of binary builds for GitHub
      releases.
    vars:
      targets:
        - os: windows
          arch: amd64
        - os: windows
          arch: arm64
        - os: darwin
          arch: amd64
        - os: darwin
          arch: arm64
        - os: linux
          arch: amd64
        - os: linux
          arch: arm64
    cmd:
      for:
        var: targets
        as: t
      vars:
        os: '{{ .t.os }}'
        arch: '{{ .t.arch }}'
      task: build-ci-target

  build-ci-target:
    desc: Builds the Skal binary for the provided GOOS/GOARCH pair.
    internal: true
    env:
      GOOS: '{{ .os }}'
      GOARCH: '{{ .arch }}'
      name_bin: '{{ .repo_name }}-{{ .os }}-{{ .arch }}{{ if eq .os "windows" }}.exe{{ end }}'
    cmd: .github/scripts/build.sh

  release-notes:
    aliases: [rn]
    interactive: true
    silent: true
    desc: |
      Produces a set of markdown unordered list bullet points of each commit
      message between provided refs 's' (start) and 'e' (end).
    cmd: git log --pretty=format:'- %s' {{ .s }}...{{ .e }}

  ##############################################################################
  #                                                                            #
  #                             Git Tag Management                             #
  #                                                                            #
  ##############################################################################
  create-tag:
    aliases: [ct]
    desc: Creates a Git tag.
    vars:
      tag: '{{ .tag }}'
    cmd: git tag '{{ .tag }}' && git push origin '{{ .tag }}'

  ##############################################################################
  #                                                                            #
  #                             Version Management                             #
  #                                                                            #
  ##############################################################################
  ver:
    aliases: [v]
    desc: Outputs the current Skal version.
    silent: true
    interactive: true
    cmd: cat '{{ .file_version }}'

  bump:
    aliases: [b]
    desc: |
      Performs a bump of the project's version.

      The segment of the version string incremented can be controlled by the 's'
      command-line value.

      Example:
        $ cat .github/VERSION
        0.0.9
        $ task b s=patch
        Bumping version 0.0.9 -> 0.0.10.
        $ task b s=minor
        Bumping version 0.0.9 -> 0.1.0.
        $ task b s=major
        Bumping version 0.0.9 -> 1.0.0.
    vars:
      # Controls the version string segment to be incremented.
      # This is intended to be provided as a command-line input but will default
      # to 'patch'.
      s: '{{ if .s }}{{ .s }}{{ else }}patch{{ end }}'
    # Increment the version.
    cmd: .github/scripts/bump.sh '{{ .s }}' '{{ .file_version }}'

  ##############################################################################
  #                                                                            #
  #                                  Dev Loop                                  #
  #                                                                            #
  ##############################################################################
  dev: &task-dev
    aliases: [d]
    desc: Performs a build and runs the compiler against a Skal source file.
    cmds:
      - clear
      # dev_src and DEV_DST should be provided by your local '.env' file.
      - go run '{{ .dir_skal_main }}' e '{{ .dev_src }}'

  devw:
    aliases: [dw]
    desc: |
      Performs a build and runs the compiler against a Skal source file, in
      watch mode.
    sources:
      - '**/*.go'
      - '{{ .dev_watch }}'
    generates:
      - '{{ .file_dev_bin }}'
    watch: true
    <<: *task-dev

  build:
    aliases: [bu]
    desc: Builds a Skal compiler binary.
    env:
      name_bin: '{{ .repo_name }}{{ if eq OS "windows" }}.exe{{ end }}'
    cmd: .github/scripts/build.sh

  install:
    aliases: [i]
    desc: Performs a 'go install' of the Skal compiler.
    cmd: go install ./cmd/skal

  ##############################################################################
  #                                                                            #
  #                                    Misc                                    #
  #                                                                            #
  ##############################################################################
  count:
    aliases: [c]
    desc: Counts lines of Go code in this repository.
    cmd: .github/scripts/count.sh

  test:
    aliases: [t]
    desc: Runs all Go tests.
    cmd: go test ./...

  install-linter:
    aliases: [il]
    desc: Installs the Golangci-Lint binary.
    cmd: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

  lint:
    aliases: [l]
    desc: Runs the Golangci linter.
    cmd: golangci-lint run ./...
